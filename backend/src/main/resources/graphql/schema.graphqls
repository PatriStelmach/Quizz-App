# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"This directive allows results to be deferred during execution"
directive @defer(
        "Deferred behaviour is controlled by this argument"
        if: Boolean!, 
        "A unique label that represents the fragment being deferred"
        label: String
    ) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"This directive disables error propagation when a non nullable field returns null for the given operation."
directive @experimental_disableErrorPropagation on QUERY | MUTATION | SUBSCRIPTION

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

type Mutation {
    updateUser(id: ID!, input: UserInput!): User!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
}

type Query {
    allQuestions: [Question!]!
    allQuizzes: [Quiz!]!
    allUsers: [User!]!
    questionById(id: ID): Question
    quizById(id: ID): Quiz
    userById(id: ID): User
}

type Question {
    answers: [String]
    correctAnswer: String
    diff: Diff
    id: ID!
    openAnswer: String
    question: String!
    questionType: QuestionType
    quiz: Quiz!
}

type Quiz {
    author: User
    category: String
    createdAt: String
    description: String
    diff: Diff
    id: ID!
    image: String
    maxPoints: Int
    questions: [Question]
    timeLimit: String
    title: String!
}

type QuizConnection {
    edges: [QuizEdge!]
    pageInfo: PageInfo!
}

type QuizEdge {
    cursor: String!
    node: Quiz!
}

type User {
    accountLocked: Boolean!
    avName: String
    avType: String
    avatar: String
    bio: String
    birthDate: String
    createdAt: String
    email: String
    enabled: Boolean!
    finishedAmount: Int
    id: ID!
    isActive: Boolean
    quizzesCreated: [Quiz]
    roles: [Role!]!
    score: Int
    streak: Int
    updatedAt: String
    userLevel: UserLevel
    username: String!
}

type UserConnection {
    edges: [UserEdge!]
    pageInfo: PageInfo!
}

type UserEdge {
    cursor: String!
    node: User!
}

type UserQuizScore {
    id: ID!
    quiz: Quiz!
    score: Int!
    user: User!
}

enum Diff {
    EASY
    EXPERT
    HARD
    MEDIUM
}

enum QuestionType {
    MULTIPLE_CHOICE
    OPEN
    SINGLE_CHOICE
}

enum Role {
    ADMIN
    USER
}

enum UserLevel {
    CASUAL
    MASTER
    NEWBIE
    NOOB
    PRO
}

input QuestionInput {
    answers: [String]
    correctAnswer: String
    diff: Diff
    id: ID!
    openAnswer: String
    question: String!
    questionType: QuestionType
    quiz: QuizInput!
}

input QuizInput {
    author: UserInput
    category: String
    createdAt: String
    description: String
    diff: Diff
    id: ID!
    image: String
    maxPoints: Int
    questions: [QuestionInput]
    timeLimit: String
    title: String!
}

input UserInput {
    accountLocked: Boolean!
    avName: String
    avType: String
    avatar: String
    bio: String
    birthDate: String
    createdAt: String
    email: String
    enabled: Boolean!
    finishedAmount: Int
    id: ID!
    isActive: Boolean
    quizzesCreated: [QuizInput]
    roles: [Role!]!
    score: Int
    streak: Int
    updatedAt: String
    userLevel: UserLevel
    username: String!
}
