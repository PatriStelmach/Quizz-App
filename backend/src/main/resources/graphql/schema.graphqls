scalar ByteArray
scalar Duration

enum Diff
{
    EASY
    MEDIUM
    HARD
    EXPERT
}
enum UserLevel
{
    NEWBIE
    NOOB
    CASUAL
    PRO
    MASTER
}
enum Role
{
    USER
    ADMIN
}
enum QuestionType
{
    SINGLE_CHOICE
    MULTIPLE_CHOICE
    OPEN
}

type UserConnection
{
    edges: [UserEdge!]
    pageInfo: PageInfo!
}

type UserEdge
{
    node: User!
    cursor: String!
}

type QuizEdge
{
    node: Quiz!
    cursor: String!
}

type QuizConnection
{
    edges: [QuizEdge!]
    pageInfo: PageInfo!
}

type PageInfo
{
    hasNextPage: Boolean!
    endCursor: String
}

type UserQuizScore {
    id: ID!
    user: User!
    quiz: Quiz!
    score: Int!
}

type User
{
    id: ID!
    username: String!
    email: String
    avName: String
    avType: String
    avatar: ByteArray
    bio: String
    isActive: Boolean
    enabled: Boolean
    createdAt: String
    updatedAt: String
    userLevel: UserLevel
    streak: Int
    score: Int
    finishedAmount: Int
    quizzesCreated: [Quiz]
}

type Quiz
{
    id: ID!
    title: String!
    description: String
    category: String
    diff: Diff
    image: ByteArray
    author: User
    createdAt: String
    timeLimit: Duration
    maxPoints: Int
    questions: [Question]

}


type Question
{
    id: ID!
    diff: Diff
    questionType: QuestionType
    question: String!
    correctAnswer: String
    openAnswer: String
    answers: [String]
    quiz: Quiz!
}

input UserInput
{
    id: ID
    username: String!
    email: String
    avName: String
    avType: String
    avatar: ByteArray
    bio: String
    isActive: Boolean
    enabled: Boolean
    createdAt: String
    updatedAt: String
    userLevel: UserLevel
    streak: Int
    score: Int
    finishedAmount: Int
    quizzesCreated: [QuizInput]
}

input QuizInput
{
    id: ID!
    title: String!
    description: String
    category: String
    diff: Diff
    image: ByteArray
    author: UserInput
    createdAt: String
    timeLimit: Duration
    maxPoints: Int
    questions: [QuestionInput]

}


input QuestionInput
{
    id: ID!
    diff: Diff
    questionType: QuestionType
    question: String!
    correctAnswer: String
    openAnswer: String
    answers: [String]
    quiz: QuizInput!
}

type Query
{
    userById(id:ID): User
    allUsers: [User!]!

    quizById(id:ID): Quiz
    allQuizzes: [Quiz!]!

    questionById(id:ID): Question
    allQuestions: [Question!]!
}

type Mutation
{
    updateUser(username: String!, input: UserInput!): User!
    updateQuiz(id: ID!, input: QuizInput): Quiz!
}
